import os
import json
import httpx
import pathlib
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

API_BASE = os.getenv("API_BASE", "http://localhost:8000").rstrip("/")
FILES_BASE = os.getenv("FILES_BASE", f"{API_BASE}/files").rstrip("/")
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "")

try:
    ALLOWED_CHATS = set(json.loads(os.getenv("ALLOWED_CHATS", "[]")))
except Exception:
    ALLOWED_CHATS = set()
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID", "0"))

# ======= –ö–û–ù–§–Ü–ì –ú–ï–ù–Æ / –Ø–ö–û–†–Ü =======
# –ù–∞–∑–≤–∏ –º–∞—é—Ç—å –∑–±—ñ–≥–∞—Ç–∏—Å—è –∑ —Ñ–∞–π–ª–∞–º–∏ —É /files-list (—ñ–º–µ–Ω–∞ PDF —É /app/docs)
PROMO_DOCS = {
    # –ë–∞–∑–æ–≤—ñ/–∑–∞–≥–∞–ª—å–Ω—ñ
    "LC Waikiki Math (UA)": "LC Waikiki Math_Ukr.pdf",
    "–ú–æ–¥—É–ª—å 1 ‚Äî –°–∫–ª–∞–¥": "Module 1_Stockroom V2.0_UA.pdf",
    "–ú–æ–¥—É–ª—å 2 ‚Äî –ü—Ä–æ–¥–∞–∂—ñ —Ç–∞ –∑–∞–ø–∞—Å–∏": "Module 2_Sales & Stock Managment V2.0_UA.pdf",
    "–ú–æ–¥—É–ª—å 3 ‚Äî –ö–∞—Å–∞": "Module 3_Cashpoint V2.0_UA.pdf",
    "–ú–æ–¥—É–ª—å 4 ‚Äî –ë–µ–∫–æ—Ñ—ñ—Å": "Module 4_Backoffice V2.0_UA.pdf",
    "RS Reports (–∑–≤—ñ—Ç–∏)": "RS Reports_UKR.pdf",
    "Stockroom Process Manual": "Stockroom Process Manual_UKR.pdf",
    "Welcome Book": "Welcome Book_2020_UA_A4-1.pdf",

    # 2nd Store Manager
    "2nd SM ‚Äî Road Map": "Road Map_SM_UKR 1.pdf",
    "2nd SM ‚Äî Introduction": "Promotion Training Program Introduction (for Second Store Manager candidates) UKR 1.pdf",
    "2nd SM ‚Äî E-learning list": "e-learning list for Second Store Managers UKR 1.pdf",
    "2nd SM ‚Äî On-the-Job Checklists": "On the Job Checklists (Second Store Manager) UKR 2.pdf",

    # Section Manager
    "Section ‚Äî Road Map": "PP Road Map_Section Manager_UKR 1.pdf",
    "Section ‚Äî Introduction": "Promotion Training Program Introduction (for Section Manager candidates)_UKR 1.pdf",
    "Section ‚Äî E-learning list": "e-learning list for Section Managers_UKR 1.pdf",
    "Section ‚Äî On-the-Job Checklists": "On the Job Checklists (Section Manager)_UKR 4.pdf",

    # Head of Stockroom
    "HOS ‚Äî Road Map": "PP Road Map_Head of Stock_UKR 1.pdf",
    "HOS ‚Äî Introduction": "Promotion Training Program Intorduction (for HOC & HOS candidates)_UKR 1.pdf",
    "HOS ‚Äî E-learning list": "e-learning list for HOS_UKR 1.pdf",
    "HOS ‚Äî On-the-Job Checklists": "On the job Checklists (Head of Stockroom)_UKR 1.pdf",
}

PROMO_ROLES = [
    ("2nd Store Manager", ["–ü–ª–∞–Ω", "–ú–æ–¥—É–ª—ñ", "E-learning", "–Ü—Å–ø–∏—Ç–∏"]),
    ("Section Manager", ["–ü–ª–∞–Ω", "–ú–æ–¥—É–ª—ñ", "E-learning", "–Ü—Å–ø–∏—Ç–∏"]),
    ("Head of Stockroom", ["–ü–ª–∞–Ω", "–ú–æ–¥—É–ª—ñ", "E-learning", "–Ü—Å–ø–∏—Ç–∏"]),
]

PROMO_MAP = {
    "2nd Store Manager": {
        "–ü–ª–∞–Ω": ["2nd SM ‚Äî Road Map", "2nd SM ‚Äî Introduction"],
        "–ú–æ–¥—É–ª—ñ": [
            "LC Waikiki Math (UA)",
            "–ú–æ–¥—É–ª—å 2 ‚Äî –ü—Ä–æ–¥–∞–∂—ñ —Ç–∞ –∑–∞–ø–∞—Å–∏",
            "–ú–æ–¥—É–ª—å 1 ‚Äî –°–∫–ª–∞–¥",
            "RS Reports (–∑–≤—ñ—Ç–∏)",
            "–ú–æ–¥—É–ª—å 3 ‚Äî –ö–∞—Å–∞",
            "–ú–æ–¥—É–ª—å 4 ‚Äî –ë–µ–∫–æ—Ñ—ñ—Å",
        ],
        "E-learning": ["2nd SM ‚Äî E-learning list", "2nd SM ‚Äî On-the-Job Checklists"],
        "–Ü—Å–ø–∏—Ç–∏": [],
    },
    "Section Manager": {
        "–ü–ª–∞–Ω": ["Section ‚Äî Road Map", "Section ‚Äî Introduction"],
        "–ú–æ–¥—É–ª—ñ": [
            "LC Waikiki Math (UA)",
            "–ú–æ–¥—É–ª—å 2 ‚Äî –ü—Ä–æ–¥–∞–∂—ñ —Ç–∞ –∑–∞–ø–∞—Å–∏",
            "–ú–æ–¥—É–ª—å 1 ‚Äî –°–∫–ª–∞–¥",
            "RS Reports (–∑–≤—ñ—Ç–∏)",
            "–ú–æ–¥—É–ª—å 3 ‚Äî –ö–∞—Å–∞",
        ],
        "E-learning": ["Section ‚Äî E-learning list", "Section ‚Äî On-the-Job Checklists"],
        "–Ü—Å–ø–∏—Ç–∏": [],
    },
    "Head of Stockroom": {
        "–ü–ª–∞–Ω": ["HOS ‚Äî Road Map", "HOS ‚Äî Introduction"],
        "–ú–æ–¥—É–ª—ñ": [
            "Stockroom Process Manual",
            "–ú–æ–¥—É–ª—å 1 ‚Äî –°–∫–ª–∞–¥",
            "RS Reports (–∑–≤—ñ—Ç–∏)",
            "LC Waikiki Math (UA)",
            "–ú–æ–¥—É–ª—å 2 ‚Äî –ü—Ä–æ–¥–∞–∂—ñ —Ç–∞ –∑–∞–ø–∞—Å–∏",
            "–ú–æ–¥—É–ª—å 3 ‚Äî –ö–∞—Å–∞",
            "–ú–æ–¥—É–ª—å 4 ‚Äî –ë–µ–∫–æ—Ñ—ñ—Å",
        ],
        "E-learning": ["HOS ‚Äî E-learning list", "HOS ‚Äî On-the-Job Checklists"],
        "–Ü—Å–ø–∏—Ç–∏": [],
    },
}

# –Ø–∫–æ—Ä—ñ —Å—Ç–æ—Ä—ñ–Ω–æ–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤
PAGE_ANCHORS = {
    "2nd Store Manager": {
        "–ü–ª–∞–Ω": {"2nd SM ‚Äî Road Map": 1, "2nd SM ‚Äî Introduction": 1},
        "–ú–æ–¥—É–ª—ñ": {},
        "E-learning": {},
        "–Ü—Å–ø–∏—Ç–∏": {},
    },
    "Section Manager": {
        "–ü–ª–∞–Ω": {"Section ‚Äî Road Map": 1, "Section ‚Äî Introduction": 1},
        "–ú–æ–¥—É–ª—ñ": {},
        "E-learning": {},
        "–Ü—Å–ø–∏—Ç–∏": {},
    },
    "Head of Stockroom": {
        "–ü–ª–∞–Ω": {"HOS ‚Äî Road Map": 1, "HOS ‚Äî Introduction": 1},
        "–ú–æ–¥—É–ª—ñ": {"Stockroom Process Manual": 1, "RS Reports (–∑–≤—ñ—Ç–∏)": 1},
        "E-learning": {},
        "–Ü—Å–ø–∏—Ç–∏": {},
    },
}

CHECKLISTS = {
    ("2nd Store Manager", "–ú–æ–¥—É–ª—ñ"): [
        "–û–ø–∞–Ω—É–≤–∞—Ç–∏ –º–∞—Ç–µ–º–∞—Ç–∏–∫—É –º–∞–≥–∞–∑–∏–Ω—É (LCM, Cover, Turnover)",
        "–ö–ª—é—á–æ–≤—ñ –∑–≤—ñ—Ç–∏ RetailStore: ‚Ññ3, ‚Ññ6, ‚Ññ18, ‚Ññ19, ‚Ññ25, ‚Ññ30, ‚Ññ62, ‚Ññ130",
        "–°–∫–ª–∞–¥: –ø—Ä–∏–π–æ–º/—Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∏/SDUZ",
        "–ö–∞—Å–∞: X/Z, –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è, –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å —Ü—ñ–Ω–∏",
    ],
    ("Section Manager", "–ú–æ–¥—É–ª—ñ"): [
        "–ö–ª—ñ—î–Ω—Ç—Å—å–∫–∏–π —Å–µ—Ä–≤—ñ—Å: –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ñ/–¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø—Ä–æ–¥–∞–∂—ñ",
        "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ç–æ–≤–∞—Ä: –≥—Ä—É–ø–∏, –µ—Ç–∏–∫–µ—Ç–∫–∏, —Ç–∫–∞–Ω–∏–Ω–∏",
        "–ö–∞–ø–∞—Å—ñ—Ç—ñ: –ø–ª–∞–Ω –º–∞–≥–∞–∑–∏–Ω—É, LEGO, –º–µ—Ä—á-–∫–∞–ª–µ–Ω–¥–∞—Ä",
        "VM: —Å—Ç—ñ–Ω–∏/—Å—Ç–æ–ª–∏/–º–∞–Ω–µ–∫–µ–Ω–∏, –ø—Ä–∞–π—Å–ø–æ—ñ–Ω—Ç–∏",
        "–ö–∞—Å–∞: X/Z, –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è",
        "HR: –≥—Ä–∞—Ñ—ñ–∫–∏, –ø—ñ–¥–±—ñ—Ä, –æ—Ä—ñ—î–Ω—Ç–∞—Ü—ñ—è",
    ],
    ("Head of Stockroom", "–ú–æ–¥—É–ª—ñ"): [
        "–ü—Ä–∏–π–æ–º –≤–∞–Ω—Ç–∞–∂—ñ–≤: –∫–æ—Ä–æ–±–∫–∏/–Ω–∞–∫–ª–∞–¥–Ω—ñ/–µ–∫—Ä–∞–Ω –ø—Ä–∏–π–æ–º—É",
        "–ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è —Ç–∞ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∏: –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ/–º—ñ–∂–º–∞–≥–∞–∑–∏–Ω–Ω—ñ, –∑–≤—ñ—Ç ‚Ññ35",
        "–û–±–ª—ñ–∫ –∑–∞–ø–∞—Å—ñ–≤: Sample Counting, –≤—ñ–¥—Å—É—Ç–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏, –º—ñ–Ω—É—Å–æ–≤–∏–π —Å—Ç–æ–∫",
        "–ë–µ–∑–ø–µ–∫–∞ —Å–∫–ª–∞–¥—É: –∞–ª–∞—Ä–º–∏, –ø–æ–∂–µ–∂–Ω–∞ –±–µ–∑–ø–µ–∫–∞, CCTV",
        "–ö–ª—é—á–æ–≤—ñ –∑–≤—ñ—Ç–∏: ‚Ññ1, ‚Ññ22, ‚Ññ28, ‚Ññ55, ‚Ññ125, ‚Ññ133, ‚Ññ5003",
    ],
}

# ======= UI =======
MAIN_KB = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìö –§–∞–π–ª–∏")],
        [KeyboardButton(text="‚¨ÜÔ∏è –ü—Ä–æ–º–æ—É—à–µ–Ω")],
    ],
    resize_keyboard=True,
)

async def guard(update: Update) -> bool:
    if not ALLOWED_CHATS:
        return True
    return update.effective_chat.id in ALLOWED_CHATS

# ======= HELPERS =======
async def list_files() -> list[dict]:
    async with httpx.AsyncClient(timeout=30) as c:
        r = await c.get(f"{API_BASE}/files-list")
        r.raise_for_status()
        return r.json().get("files", [])

def file_url(name: str, page: int | None = None) -> str:
    url = f"{FILES_BASE}/{name}"
    if page:
        url = f"{url}#page={int(page)}"
    return url

# ======= HANDLERS =======
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await guard(update): return await update.message.reply_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –æ–±–º–µ–∂–µ–Ω–æ.")
    text = (
        "–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–æ–≤—ñ–¥–Ω–∏–∫ –¥–ª—è –ª—ñ–Ω—ñ–π–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—É.\n\n"
        "‚Ä¢ **üìö –§–∞–π–ª–∏** ‚Äî —É—Å—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –≥–∞–π–¥–ª–∞–π–Ω–∏\n"
        "‚Ä¢ **‚¨ÜÔ∏è –ü—Ä–æ–º–æ—É—à–µ–Ω** ‚Äî –ø—Ä–æ–≥—Ä–∞–º–∞ –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è –¥–ª—è 3 —Ä–æ–ª–µ–π\n\n"
        "–ù–∞–¥—ñ—à–ª–∏ PDF —è–∫ –¥–æ–∫—É–º–µ–Ω—Ç ‚Äî —è –∑–±–µ—Ä–µ–∂—É –π–æ–≥–æ —É /files/."
    )
    await update.message.reply_text(text, reply_markup=MAIN_KB)

# --- –§–ê–ô–õ–ò ---
async def files_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await guard(update): return
    try:
        items = await list_files()
    except Exception as e:
        return await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤: {e}")
    if not items:
        return await update.message.reply_text("–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ PDF —É /files/. –ù–∞–¥—ñ—à–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç —Å—é–¥–∏.")
    rows = [[InlineKeyboardButton(text=it["name"], url=file_url(it["name"]))] for it in items]
    await update.message.reply_text("üìö –ü—Ä—è–º–∏–π –¥–æ—Å—Ç—É–ø –¥–æ —Ñ–∞–π–ª—ñ–≤:", reply_markup=InlineKeyboardMarkup(rows), disable_web_page_preview=True)

# --- –ü–†–û–ú–û–£–®–ï–ù ---
async def promo_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await guard(update): return
    rows = [[InlineKeyboardButton(text=role, callback_data=f"promo:{role}")] for role, _ in PROMO_ROLES]
    await update.message.reply_text("‚¨ÜÔ∏è –û–±–µ—Ä–∏ –Ω–∞–ø—Ä—è–º –ø—Ä–æ–º–æ—É—à–µ–Ω—É:", reply_markup=InlineKeyboardMarkup(rows))

async def on_promo_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await guard(update): return
    q = update.callback_query
    await q.answer()
    role = q.data.split(":", 1)[1]
    tabs = dict(PROMO_ROLES)[role]
    rows = [[InlineKeyboardButton(text=tab, callback_data=f"promo_nav:{role}:{tab}")] for tab in tabs]
    await q.edit_message_text(text=f"‚¨ÜÔ∏è {role}: –æ–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª")
    await q.message.reply_text("–ú–µ–Ω—é –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤:", reply_markup=InlineKeyboardMarkup(rows), disable_web_page_preview=True)

async def on_promo_nav(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await guard(update): return
    q = update.callback_query
    await q.answer()
    _, role, tab = q.data.split(":", 2)
    items = PROMO_MAP.get(role, {}).get(tab, [])
    checklist = CHECKLISTS.get((role, tab))
    header = f"üìÇ {role} ‚Äî {tab}"
    if checklist:
        bullets = "\n".join([f"‚Ä¢ {x}" for x in checklist])
        await q.edit_message_text(text=f"{header}\n\n–ö–æ—Ä–æ—Ç–∫–∏–π —á–µ–∫-–ª–∏—Å—Ç:\n{bullets}")
    else:
        await q.edit_message_text(text=header)

    rows = []
    anchors = PAGE_ANCHORS.get(role, {}).get(tab, {})
    for title in items:
        rel = PROMO_DOCS.get(title)
        if not rel:
            # —è–∫—â–æ —É –º–∞–ø—ñ –Ω–µ–º–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ (–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π —Ñ–∞–π–ª)
            continue
        page = anchors.get(title)
        rows.append([InlineKeyboardButton(text=title, url=file_url(rel, page))])
    if rows:
        await q.message.reply_text("–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏:", reply_markup=InlineKeyboardMarkup(rows), disable_web_page_preview=True)
    else:
        await q.message.reply_text("–î–ª—è —Ü—å–æ–≥–æ —Ä–æ–∑–¥—ñ–ª—É –ø–æ–∫–∏ —â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ —É /files/.")

# --- –ü–†–ò–ô–û–ú PDF ---
async def on_doc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await guard(update): return
    doc = update.message.document
    if not doc or not doc.file_name.lower().endswith(".pdf"):
        return await update.message.reply_text("–ü–æ—Ç—Ä—ñ–±–µ–Ω PDF-–¥–æ–∫—É–º–µ–Ω—Ç (–Ω–∞–¥—ñ—à–ª–∏ —è–∫ *–î–æ–∫—É–º–µ–Ω—Ç*, –Ω–µ —è–∫ —Ñ–æ—Ç–æ).")
    file = await doc.get_file()
    path = os.path.join("docs", doc.file_name)
    await file.download_to_drive(path)
    await update.message.reply_text("üìÑ PDF –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –ö–Ω–æ–ø–∫–∞ **üìö –§–∞–π–ª–∏** —É–∂–µ –ø–æ–∫–∞–∂–µ –π–æ–≥–æ.")

async def on_text_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip()
    if text == "üìö –§–∞–π–ª–∏":
        return await files_cmd(update, context)
    if text == "‚¨ÜÔ∏è –ü—Ä–æ–º–æ—É—à–µ–Ω":
        return await promo_menu(update, context)

def main():
    print("[bot] starting application...", flush=True)
    if not BOT_TOKEN:
        print("[bot] ERROR: TELEGRAM_BOT_TOKEN is empty", flush=True)
        raise SystemExit(1)

    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("files", files_cmd))
    app.add_handler(CommandHandler("promo", promo_menu))

    # –ö–Ω–æ–ø–∫–∏ —Ç–∞ –∫–æ–ª–±–µ–∫–∏
    app.add_handler(CallbackQueryHandler(on_promo_role, pattern=r"^promo:"))
    app.add_handler(CallbackQueryHandler(on_promo_nav, pattern=r"^promo_nav:"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text_buttons))

    # –ü—Ä–∏–π–æ–º PDF
    app.add_handler(MessageHandler(filters.Document.PDF, on_doc))

    print("[bot] polling...", flush=True)
    app.run_polling(drop_pending_updates=True, close_loop=False)

if __name__ == "__main__":
    main()
