import os
import json
import httpx
import pathlib
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InputMediaPhoto,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

API_BASE = os.getenv("API_BASE", "http://localhost:8000").rstrip("/")
FILES_BASE = os.getenv("FILES_BASE", f"{API_BASE}/files").rstrip("/")
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "")

try:
    ALLOWED_CHATS = set(json.loads(os.getenv("ALLOWED_CHATS", "[]")))
except Exception:
    ALLOWED_CHATS = set()
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID", "0"))

# === –û—Å–Ω–æ–≤–Ω—ñ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏ ===
LOGO_URL = "https://upload.wikimedia.org/wikipedia/commons/4/4f/LC_Waikiki_logo.svg"

MAIN_KB = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìö –§–∞–π–ª–∏")],
        [KeyboardButton(text="‚¨ÜÔ∏è –ü—Ä–æ–º–æ—É—à–µ–Ω")],
    ],
    resize_keyboard=True,
)

# ======= –î–æ–∑–≤—ñ–ª –Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è =======
async def guard(update: Update) -> bool:
    if not ALLOWED_CHATS:
        return True
    return update.effective_chat.id in ALLOWED_CHATS

# ======= –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó =======
async def list_files() -> list[dict]:
    async with httpx.AsyncClient(timeout=30) as c:
        r = await c.get(f"{API_BASE}/files-list")
        r.raise_for_status()
        return r.json().get("files", [])

def file_url(name: str, page: int | None = None) -> str:
    url = f"{FILES_BASE}/{name}"
    if page:
        url = f"{url}#page={int(page)}"
    return url

# ======= –í—ñ—Ç–∞–ª—å–Ω–∏–π –µ–∫—Ä–∞–Ω =======
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await guard(update):
        return await update.message.reply_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –æ–±–º–µ–∂–µ–Ω–æ.")
    text = (
        "üëã –í—ñ—Ç–∞—î–º–æ —É *LC Waikiki Guide Bot*!\n\n"
        "–¶–µ–π –±–æ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –¥–ª—è –ª—ñ–Ω—ñ–π–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—É –º–∞–≥–∞–∑–∏–Ω—ñ–≤ LC Waikiki.\n\n"
        "üìö *–§–∞–π–ª–∏* ‚Äî —É—Å—ñ –≥–∞–π–¥–ª–∞–π–Ω–∏, —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó —Ç–∞ –º–∞–Ω—É–∞–ª–∏\n"
        "‚¨ÜÔ∏è *–ü—Ä–æ–º–æ—É—à–µ–Ω* ‚Äî –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–∏ –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è –¥–ª—è 3 –ø–æ–∑–∏—Ü—ñ–π\n\n"
        "_–ù–∞–¥—ñ—à–ª—ñ—Ç—å PDF —è–∫ –¥–æ–∫—É–º–µ–Ω—Ç ‚Äî —ñ —è –¥–æ–¥–∞–º –π–æ–≥–æ –¥–æ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏._"
    )
    await update.message.reply_photo(
        photo=LOGO_URL,
        caption=text,
        parse_mode="Markdown",
        reply_markup=MAIN_KB,
    )

# ======= –§–∞–π–ª–∏ =======
async def files_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await guard(update): return
    try:
        items = await list_files()
    except Exception as e:
        return await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤: {e}")
    if not items:
        return await update.message.reply_text("–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ PDF —É /files/. –ù–∞–¥—ñ—à–ª—ñ—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç —Å—é–¥–∏.")
    rows = [[InlineKeyboardButton(text=it["name"], url=file_url(it["name"]))] for it in items]
    await update.message.reply_text(
        "üìö *–§–∞–π–ª–æ–≤–∞ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞:*",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(rows),
        disable_web_page_preview=True,
    )

# ======= –ü—Ä–æ–º–æ—É—à–µ–Ω =======
async def promo_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await guard(update): return
    rows = [
        [InlineKeyboardButton(text="üëî 2nd Store Manager", callback_data="promo:2nd Store Manager")],
        [InlineKeyboardButton(text="üß• Section Manager", callback_data="promo:Section Manager")],
        [InlineKeyboardButton(text="üì¶ Head of Stockroom", callback_data="promo:Head of Stockroom")],
    ]
    await update.message.reply_text(
        "‚¨ÜÔ∏è –û–±–µ—Ä—ñ—Ç—å –Ω–∞–ø—Ä—è–º *Promotion Program*:",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(rows),
    )

# --- TODO: –ø—Ä–æ–º–æ-–Ω–∞–≤—ñ–≥–∞—Ü—ñ—è (–∑–∞–ª–∏—à–∞—î—Ç—å—Å—è —è–∫ —É –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –≤–µ—Ä—Å—ñ—ó) ---
# –ú–æ–∂–µ—à —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏ —Å–≤—ñ–π –±–ª–æ–∫ —ñ–∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ `bot_telegram.py`,
# –±–æ —Ç–∞–º —É–∂–µ –≥–æ—Ç–æ–≤–∞ –ª–æ–≥—ñ–∫–∞ –¥–ª—è —Ä–æ–ª–µ–π —Ç–∞ —Ñ–∞–π–ª—ñ–≤.

# ======= –ü—Ä–∏–π–æ–º PDF =======
async def on_doc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await guard(update): return
    doc = update.message.document
    if not doc or not doc.file_name.lower().endswith(".pdf"):
        return await update.message.reply_text("–ü–æ—Ç—Ä—ñ–±–µ–Ω PDF-–¥–æ–∫—É–º–µ–Ω—Ç (–Ω–∞–¥—ñ—à–ª—ñ—Ç—å —è–∫ *–î–æ–∫—É–º–µ–Ω—Ç*, –Ω–µ —è–∫ —Ñ–æ—Ç–æ).")
    file = await doc.get_file()
    path = os.path.join("docs", doc.file_name)
    await file.download_to_drive(path)
    await update.message.reply_text("‚úÖ PDF –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —É –º–µ–Ω—é üìö –§–∞–π–ª–∏.")

# ======= –ú–µ–Ω—é –∫–Ω–æ–ø–æ–∫ =======
async def on_text_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip()
    if text == "üìö –§–∞–π–ª–∏":
        return await files_cmd(update, context)
    if text == "‚¨ÜÔ∏è –ü—Ä–æ–º–æ—É—à–µ–Ω":
        return await promo_menu(update, context)

# ======= –ó–∞–ø—É—Å–∫ =======
def main():
    print("[bot] starting application...", flush=True)
    if not BOT_TOKEN:
        print("[bot] ERROR: TELEGRAM_BOT_TOKEN is empty", flush=True)
        raise SystemExit(1)

    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("files", files_cmd))
    app.add_handler(CommandHandler("promo", promo_menu))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text_buttons))
    app.add_handler(MessageHandler(filters.Document.PDF, on_doc))

    print("[bot] polling...", flush=True)
    app.run_polling(drop_pending_updates=True, close_loop=False)

if __name__ == "__main__":
    main()
