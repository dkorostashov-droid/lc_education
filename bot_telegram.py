import os
import json
import httpx
from typing import Dict, List, Tuple, Optional
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

# ---------- ENV ----------
API_BASE = os.getenv("API_BASE", "http://localhost:8000").rstrip("/")
FILES_BASE = os.getenv("FILES_BASE", f"{API_BASE}/files").rstrip("/")
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "")

try:
    ALLOWED_CHATS = set(json.loads(os.getenv("ALLOWED_CHATS", "[]")))
except Exception:
    ALLOWED_CHATS = set()
try:
    ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID", "0"))
except Exception:
    ADMIN_CHAT_ID = 0

# ---------- –ö–ê–†–¢–ò –î–û–ö–£–ú–ï–ù–¢–Ü–í ----------
# 1) –ü–†–û–ú–û (–≤–∏–¥–∏–º—ñ —Ç—ñ–ª—å–∫–∏ –≤ –º–µ–Ω—é –ü—Ä–æ–º–æ—É—à–µ–Ω, —É "üìö –§–∞–π–ª–∏" –ù–ï –ø–æ–∫–∞–∑—É—î–º–æ)
PROMO_DOCS: Dict[str, str] = {
    # 2nd Store Manager
    "2nd SM ‚Äî Road Map": "Road Map_SM_UKR 1.pdf",
    "2nd SM ‚Äî Introduction": "Promotion Training Program Introduction (for Second Store Manager candidates) UKR 1.pdf",
    "2nd SM ‚Äî E-learning list": "e-learning list for Second Store Managers UKR 1.pdf",
    "2nd SM ‚Äî On-the-Job Checklists": "On the Job Checklists (Second Store Manager) UKR 2.pdf",

    # Section Manager
    "Section ‚Äî Road Map": "PP Road Map_Section Manager_UKR 1.pdf",
    "Section ‚Äî Introduction": "Promotion Training Program Introduction (for Section Manager candidates)_UKR 1.pdf",
    "Section ‚Äî E-learning list": "e-learning list for Section Managers_UKR 1.pdf",
    "Section ‚Äî On-the-Job Checklists": "On the Job Checklists (Section Manager)_UKR 4.pdf",

    # Head of Stockroom
    "HOS ‚Äî Road Map": "PP Road Map_Head of Stock_UKR 1.pdf",
    "HOS ‚Äî Introduction": "Promotion Training Program Intorduction (for HOC & HOS candidates)_UKR 1.pdf",
    "HOS ‚Äî E-learning list": "e-learning list for HOS_UKR 1.pdf",
    "HOS ‚Äî On-the-Job Checklists": "On the job Checklists (Head of Stockroom)_UKR 1.pdf",
}

# 2) –§–ê–ô–õ–ò (–≤–∏–¥–∏–º—ñ —É "üìö –§–∞–π–ª–∏")
FILES_DOCS: Dict[str, str] = {
    # –ú–æ–¥—É–ª—ñ (–æ–∫—Ä–µ–º–æ—é –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é)
    "Module 1_Stockroom V2.0_UA": "Module 1_Stockroom V2.0_UA.pdf",
    "Module 2_Sales & Stock Managment V2.0_UA": "Module 2_Sales & Stock Managment V2.0_UA.pdf",
    "Module 3_Cashpoint V2.0_UA": "Module 3_Cashpoint V2.0_UA.pdf",
    "Module 4_Backoffice V2.0_UA": "Module 4_Backoffice V2.0_UA.pdf",

    # –î–æ–≤—ñ–¥–Ω–∏–∫–∏
    "LC Waikiki Math (UA)": "LC Waikiki Math_Ukr.pdf",
    "RS Reports (–∑–≤—ñ—Ç–∏)": "RS Reports_UKR.pdf",
    "Stockroom Process Manual": "Stockroom Process Manual_UKR.pdf",

    # Welcome
    "Welcome Book_2020_UA_A4-1": "Welcome Book_2020_UA_A4-1.pdf",
}

# 3) –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó —É "üìö –§–∞–π–ª–∏" (–ª–∏—à–µ –∑ FILES_DOCS)
FILE_CATEGORIES: Dict[str, List[str]] = {
    "–ú–æ–¥—É–ª—ñ": [
        "Module 1_Stockroom V2.0_UA",
        "Module 2_Sales & Stock Managment V2.0_UA",
        "Module 3_Cashpoint V2.0_UA",
        "Module 4_Backoffice V2.0_UA",
    ],
    "–î–æ–≤—ñ–¥–Ω–∏–∫–∏": [
        "LC Waikiki Math (UA)",
        "RS Reports (–∑–≤—ñ—Ç–∏)",
        "Stockroom Process Manual",
    ],
    "Welcome –¥–ª—è –Ω–æ–≤–∞—á–∫—ñ–≤": [
        "Welcome Book_2020_UA_A4-1",
    ],
}

# ---------- –°–¢–†–£–ö–¢–£–†–ê –ü–†–û–ú–û (—Ä–æ–ª—ñ -> –≤–∫–ª–∞–¥–∫–∏) ----------
PROMO_ROLES: List[Tuple[str, List[str]]] = [
    ("2nd Store Manager", ["–ü–ª–∞–Ω", "–ú–æ–¥—É–ª—ñ", "E-learning", "–Ü—Å–ø–∏—Ç–∏"]),
    ("Section Manager", ["–ü–ª–∞–Ω", "–ú–æ–¥—É–ª—ñ", "E-learning", "–Ü—Å–ø–∏—Ç–∏"]),
    ("Head of Stockroom", ["–ü–ª–∞–Ω", "–ú–æ–¥—É–ª—ñ", "E-learning", "–Ü—Å–ø–∏—Ç–∏"]),
]

PROMO_MAP: Dict[str, Dict[str, List[str]]] = {
    "2nd Store Manager": {
        "–ü–ª–∞–Ω": ["2nd SM ‚Äî Road Map", "2nd SM ‚Äî Introduction"],
        "–ú–æ–¥—É–ª—ñ": [
            "LC Waikiki Math (UA)",
            "Module 2_Sales & Stock Managment V2.0_UA",
            "Module 1_Stockroom V2.0_UA",
            "RS Reports (–∑–≤—ñ—Ç–∏)",
            "Module 3_Cashpoint V2.0_UA",
            "Module 4_Backoffice V2.0_UA",
        ],
        "E-learning": ["2nd SM ‚Äî E-learning list", "2nd SM ‚Äî On-the-Job Checklists"],
        "–Ü—Å–ø–∏—Ç–∏": [],
    },
    "Section Manager": {
        "–ü–ª–∞–Ω": ["Section ‚Äî Road Map", "Section ‚Äî Introduction"],
        "–ú–æ–¥—É–ª—ñ": [
            "LC Waikiki Math (UA)",
            "Module 2_Sales & Stock Managment V2.0_UA",
            "Module 1_Stockroom V2.0_UA",
            "RS Reports (–∑–≤—ñ—Ç–∏)",
            "Module 3_Cashpoint V2.0_UA",
        ],
        "E-learning": ["Section ‚Äî E-learning list", "Section ‚Äî On-the-Job Checklists"],
        "–Ü—Å–ø–∏—Ç–∏": [],
    },
    "Head of Stockroom": {
        "–ü–ª–∞–Ω": ["HOS ‚Äî Road Map", "HOS ‚Äî Introduction"],
        "–ú–æ–¥—É–ª—ñ": [
            "Stockroom Process Manual",
            "Module 1_Stockroom V2.0_UA",
            "RS Reports (–∑–≤—ñ—Ç–∏)",
            "LC Waikiki Math (UA)",
            "Module 2_Sales & Stock Managment V2.0_UA",
            "Module 3_Cashpoint V2.0_UA",
            "Module 4_Backoffice V2.0_UA",
        ],
        "E-learning": ["HOS ‚Äî E-learning list", "HOS ‚Äî On-the-Job Checklists"],
        "–Ü—Å–ø–∏—Ç–∏": [],
    },
}

# ---------- –Ø–ö–û–†–Ü –°–¢–û–†–Ü–ù–û–ö (#page=) ----------
PAGE_ANCHORS: Dict[str, Dict[str, Dict[str, int]]] = {
    "2nd Store Manager": {
        "–ü–ª–∞–Ω": {"2nd SM ‚Äî Road Map": 1, "2nd SM ‚Äî Introduction": 1},
        "–ú–æ–¥—É–ª—ñ": {},
        "E-learning": {},
        "–Ü—Å–ø–∏—Ç–∏": {},
    },
    "Section Manager": {
        "–ü–ª–∞–Ω": {"Section ‚Äî Road Map": 1, "Section ‚Äî Introduction": 1},
        "–ú–æ–¥—É–ª—ñ": {},
        "E-learning": {},
        "–Ü—Å–ø–∏—Ç–∏": {},
    },
    "Head of Stockroom": {
        "–ü–ª–∞–Ω": {"HOS ‚Äî Road Map": 1, "HOS ‚Äî Introduction": 1},
        "–ú–æ–¥—É–ª—ñ": {"Stockroom Process Manual": 1, "RS Reports (–∑–≤—ñ—Ç–∏)": 1},
        "E-learning": {},
        "–Ü—Å–ø–∏—Ç–∏": {},
    },
}

# ---------- –ú–Ü–ù–Ü-–ì–ê–ô–î–ò (5‚Äì7 –ø—É–Ω–∫—Ç—ñ–≤) ----------
MINI_GUIDES: Dict[Tuple[str, str], List[str]] = {
    # 2nd SM
    ("2nd Store Manager", "–ü–ª–∞–Ω"): [
        "–û–∑–Ω–∞–π–æ–º—Å—è –∑ Road Map —Ç–∞ –¥–µ–¥–ª–∞–π–Ω–∞–º–∏ –µ—Ç–∞–ø—ñ–≤.",
        "–ó—É—Å—Ç—Ä—ñ–Ω—å—Å—è –∑ SM/DSM: —É–∑–≥–æ–¥—å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ç–∞ KPI.",
        "–°–∫–ª–∞–¥–∏ –æ—Å–æ–±–∏—Å—Ç–∏–π –ø–ª–∞–Ω –Ω–∞–≤—á–∞–Ω–Ω—è (—â–æ—Ç–∏–∂–Ω–µ–≤—ñ —Ü—ñ–ª—ñ).",
        "–ó–∞–±—Ä–æ–Ω—é–π shadowing —É –∫–ª—é—á–æ–≤–∏—Ö –∑–æ–Ω–∞—Ö –º–∞–≥–∞–∑–∏–Ω—É.",
        "–í–µ–¥–∏ —Ç—Ä–µ–∫–µ—Ä –ø—Ä–æ–≥—Ä–µ—Å—É (Google Sheet/–Ω–æ—Ç–∞—Ç–Ω–∏–∫).",
    ],
    ("2nd Store Manager", "–ú–æ–¥—É–ª—ñ"): [
        "LCM/Cover/Turnover ‚Äî –±–∞–∑–æ–≤–∞ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω—É.",
        "–ö–ª—é—á–æ–≤—ñ –∑–≤—ñ—Ç–∏ RS: ‚Ññ3, 6, 18, 19, 25, 30, 62, 130.",
        "–°–∫–ª–∞–¥: –ø—Ä–∏–π–æ–º/—Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∏/SDUZ ‚Äî –±–µ–∑ –ø–æ–º–∏–ª–æ–∫ —ñ –≤ —Å—Ç—Ä–æ–∫.",
        "–ö–∞—Å–∞: X/Z, –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è, —Ä–æ–∑–±—ñ–∂–Ω–æ—Å—Ç—ñ ‚Äî –ø–æ SOP.",
        "Backoffice: –¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±—ñ–≥ —ñ –∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—è –∑ HQ.",
    ],
    ("2nd Store Manager", "E-learning"): [
        "–ì—Ä–∞—Ñ—ñ–∫ —Å–µ—Å—ñ–π: 30‚Äì45 —Ö–≤, 3‚Äì4 —Ä–∞–∑–∏/—Ç–∏–∂–¥–µ–Ω—å.",
        "–ü—ñ—Å–ª—è –∫—É—Ä—Å—É ‚Äî 3 —Ç–µ–∑–∏ + 1 –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –Ω–∞ –∑–º—ñ–Ω—ñ.",
        "–ö–æ—Ä–æ—Ç–∫–∏–π –∫–≤—ñ–∑ —á–∏ –æ–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è –∑ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–º.",
        "–ù–æ—Ç–∞—Ç–∫–∏/—Å–∫—Ä—ñ–Ω–∏ ‚Äî –¥—ñ–ª–∏—Å—å –∑ –∫–æ–º–∞–Ω–¥–æ—é.",
    ],
    ("2nd Store Manager", "–Ü—Å–ø–∏—Ç–∏"): [
        "–ü–æ–≤—Ç–æ—Ä–∏ –∫–ª—é—á–æ–≤—ñ –∑–≤—ñ—Ç–∏ —Ç–∞ –º–µ—Ç—Ä–∏–∫–∏ –º–∞–≥–∞–∑–∏–Ω—É.",
        "Mock-—ñ–Ω—Ç–µ—Ä–≤‚Äô—é –∑ SM/HR.",
        "2‚Äì3 –∫–µ–π—Å–∏ ¬´–±—É–ª–æ/—Å—Ç–∞–ª–æ¬ª –∑ —Ç–≤–æ—î—ó –¥—ñ–ª—è–Ω–∫–∏.",
        "3 –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –Ω–∞ –º—ñ—Å—è—Ü—å ‚Äî —á—ñ—Ç–∫–∏–π –ø–ª–∞–Ω.",
    ],

    # Section Manager
    ("Section Manager", "–ü–ª–∞–Ω"): [
        "–£–∑–≥–æ–¥—å –∑ SM —Ü—ñ–ª—ñ —Å–µ–∫—Ü—ñ—ó (–ø—Ä–æ–¥–∞–∂, –∫–æ–Ω–≤–µ—Ä—Å—ñ—è, AT/UPT).",
        "–°–ø–ª–∞–Ω—É–π —Ä–æ—Ç–∞—Ü—ñ—ó —Ç–∞ –∫–ª—é—á–æ–≤—ñ –¥–Ω—ñ –º–µ—Ä—á—É.",
        "Shadowing –∑ –¥–æ—Å–≤—ñ–¥—á–µ–Ω–∏–º SM.",
        "–©–æ—Ç–∏–∂–Ω–µ–≤–∏–π —á–µ–∫-—ñ–Ω 15 —Ö–≤ —ñ–∑ SM.",
        "–í–µ–¥–∏ —á–µ–∫-–ª–∏—Å—Ç –∫–æ–º–ø–µ—Ç–µ–Ω—Ü—ñ–π.",
    ],
    ("Section Manager", "–ú–æ–¥—É–ª—ñ"): [
        "Customer experience: —Ç—Ä–µ–Ω—É–π –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ñ/–¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø—Ä–æ–¥–∞–∂—ñ.",
        "Product knowledge: –º—ñ–Ω—ñ-–∫–∞—Ç–∞–ª–æ–≥ –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤/–µ—Ç–∏–∫–µ—Ç–æ–∫.",
        "Capacity & –ø–ª–∞–Ω–æ–≥—Ä–∞–º–∞: –ø–ª–∞–Ω —Å–µ–∫—Ü—ñ—ó, LEGO, –∫–∞–ª–µ–Ω–¥–∞—Ä –º–µ—Ä—á—É.",
        "VM: —Å—Ç—ñ–Ω–∏/—Å—Ç–æ–ª–∏/–º–∞–Ω–µ–∫–µ–Ω–∏, –ø—Ä–∞–π—Å–ø–æ—ñ–Ω—Ç–∏ ‚Äî —â–æ–¥–µ–Ω–Ω–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å.",
        "–ö–∞—Å–∞: X/Z, –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è —É —Å–∫–ª–∞–¥–Ω–∏—Ö –∫–µ–π—Å–∞—Ö.",
    ],
    ("Section Manager", "E-learning"): [
        "–°–µ—Å—ñ—ó –¥–æ 45 —Ö–≤; –ø–æ –∫–æ–∂–Ω–æ–º—É –∫—É—Ä—Å—É ‚Äî 1 –ø—Ä–∏–π–æ–º —É —Ä–æ–±–æ—Ç—É.",
        "–ú—ñ–Ω—ñ-—Ä–æ–ª–µ–ø–ª–µ–π —ñ–∑ –∫–æ–ª–µ–≥–æ—é (5 —Ö–≤).",
        "–©–æ—Ç–∏–∂–Ω—è –¥—ñ–ª–∏—Ç–∏—Å—å —ñ–Ω—Å–∞–π—Ç–∞–º–∏ –∑ –∫–æ–º–∞–Ω–¥–æ—é.",
        "–í—ñ–¥–∑–Ω–∞—á–∞–π —É —Ç—Ä–µ–∫–µ—Ä—ñ –∑–∞–≤–µ—Ä—à–µ–Ω—ñ –∫—É—Ä—Å–∏.",
    ],
    ("Section Manager", "–Ü—Å–ø–∏—Ç–∏"): [
        "–§–æ—Ç–æ–∫–µ–π—Å–∏ VM ¬´–¥–æ/–ø—ñ—Å–ª—è¬ª.",
        "–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—è —á–∏—Ç–∞–Ω–Ω—è –∫–ª—é—á–æ–≤–∏—Ö –∑–≤—ñ—Ç—ñ–≤ —Å–µ–∫—Ü—ñ—ó.",
        "2 –∫–µ–π—Å–∏ —Ä–æ–±–æ—Ç–∏ –∑ –∑–∞–ø–µ—Ä–µ—á–µ–Ω–Ω—è–º–∏ –∫–ª—ñ—î–Ω—Ç—ñ–≤.",
        "–ü–ª–∞–Ω –Ω–∞ –º—ñ—Å—è—Ü—å: 3 –¥—ñ—ó —Ç–∞ –º–µ—Ç—Ä–∏–∫–∏ —É—Å–ø—ñ—Ö—É.",
    ],

    # HOS
    ("Head of Stockroom", "–ü–ª–∞–Ω"): [
        "–£–∑–≥–æ–¥—å –º–µ—Ç—Ä–∏–∫–∏ —Å–∫–ª–∞–¥—É: —Ç–æ—á–Ω—ñ—Å—Ç—å, —à–≤–∏–¥–∫—ñ—Å—Ç—å, –≤—Ç—Ä–∞—Ç–∏.",
        "–ö–∞–ª–µ–Ω–¥–∞—Ä –ø–æ—Å—Ç–∞–≤–æ–∫/—ñ–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü—ñ–π.",
        "–û—Ä–≥–∞–Ω—ñ–∑—É–π –∑–æ–Ω–∏: –ø—Ä–∏–π–æ–º, –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è, –≤–∏–¥–∞—á–∞, –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è.",
        "–©–æ–¥–µ–Ω–Ω—ñ —á–µ–∫–∏ —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ.",
        "–õ–æ–≥–∏ —ñ–Ω—Ü–∏–¥–µ–Ω—Ç—ñ–≤: –ø–æ–º–∏–ª–∫–∏/–≤—Ç—Ä–∞—Ç–∏/–ø–æ—à–∫–æ–¥–∂–µ–Ω–Ω—è.",
    ],
    ("Head of Stockroom", "–ú–æ–¥—É–ª—ñ"): [
        "–ü—Ä–∏–π–æ–º: –∑–≤—ñ—Ä–∫–∞ –∫–æ—Ä–æ–±–æ–∫/–Ω–∞–∫–ª–∞–¥–Ω–∏—Ö, –µ–∫—Ä–∞–Ω –ø—Ä–∏–π–æ–º—É.",
        "–¢—Ä–∞–Ω—Å—Ñ–µ—Ä–∏: –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ/–º—ñ–∂–º–∞–≥–∞–∑–∏–Ω–Ω—ñ, –∫–æ–Ω—Ç—Ä–æ–ª—å –∑–≤—ñ—Ç—É ‚Ññ35.",
        "–û–±–ª—ñ–∫: sample counting, –≤—ñ–¥—Å—É—Ç–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏, –º—ñ–Ω—É—Å–æ–≤–∏–π —Å—Ç–æ–∫.",
        "–ë–µ–∑–ø–µ–∫–∞: –∞–ª–∞—Ä–º–∏, –ø–æ–∂–µ–∂–Ω–∞ –±–µ–∑–ø–µ–∫–∞, CCTV ‚Äî —â–æ–¥–µ–Ω–Ω—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏.",
        "–ó–≤—ñ—Ç–∏: ‚Ññ1, 22, 28, 55, 125, 133, 5003 ‚Äî —Ä–æ–∑—É–º—ñ–π —ñ –∫–æ–Ω—Ç—Ä–æ–ª—é–π.",
    ],
    ("Head of Stockroom", "E-learning"): [
        "–ü–ª–∞–Ω—É–π –∫—É—Ä—Å–∏ –Ω–∞ –º–µ–Ω—à –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –¥–Ω—ñ.",
        "–ü—ñ—Å–ª—è –∫—É—Ä—Å—É ‚Äî 1 –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å—É, –∑–∞—Ñ—ñ–∫—Å—É–π —É —á–µ–∫-–ª–∏—Å—Ç—ñ.",
        "–ú—ñ–Ω—ñ-–Ω–∞–≤—á–∞–Ω–Ω—è –¥–ª—è –∫–æ–ª–µ–≥–∏ (5‚Äì7 —Ö–≤).",
        "–°–∞–º–æ–ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–∫–ª–∞–¥—É –∑–∞ —á–µ–∫-–ª–∏—Å—Ç–æ–º.",
    ],
    ("Head of Stockroom", "–Ü—Å–ø–∏—Ç–∏"): [
        "–°—Ö–µ–º–∞ —Å–∫–ª–∞–¥—É —Ç–∞ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∏.",
        "–ö–µ–π—Å ¬´–ø–æ–º–∏–ª–∫–∞ ‚Üí –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è ‚Üí –ø—Ä–æ—Ñ—ñ–ª–∞–∫—Ç–∏–∫–∞¬ª.",
        "–ú–µ—Ç—Ä–∏–∫–∏: —à–≤–∏–¥–∫—ñ—Å—Ç—å –ø—Ä–∏–π–æ–º—É, —Ç–æ—á–Ω—ñ—Å—Ç—å —ñ–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü—ñ—ó.",
        "–ü–ª–∞–Ω –ø–æ–∫—Ä–∞—â–µ–Ω—å –Ω–∞ –∫–≤–∞—Ä—Ç–∞–ª (3 –¥—ñ—ó, –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ, —Å—Ç—Ä–æ–∫–∏).",
    ],
}

# ---------- UI ----------
PERSISTENT_KB = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìö –§–∞–π–ª–∏")],
        [KeyboardButton(text="‚¨ÜÔ∏è –ü—Ä–æ–º–æ—É—à–µ–Ω")],
    ],
    resize_keyboard=True,
)

def inline_home_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìö –§–∞–π–ª–∏", callback_data="nav:files"),
         InlineKeyboardButton("‚¨ÜÔ∏è –ü—Ä–æ–º–æ—É—à–µ–Ω", callback_data="nav:promo")],
    ])

# ---------- HELPERS ----------
async def guard(update: Update) -> bool:
    if not ALLOWED_CHATS:
        return True
    chat_id = update.effective_chat.id if update.effective_chat else None
    return chat_id in ALLOWED_CHATS

async def list_files() -> List[Dict]:
    async with httpx.AsyncClient(timeout=30) as c:
        r = await c.get(f"{API_BASE}/files-list")
        r.raise_for_status()
        return r.json().get("files", [])

def file_url(name: str, page: Optional[int] = None) -> str:
    url = f"{FILES_BASE}/{name}"
    return f"{url}#page={int(page)}" if page else url

# ---------- HANDLERS ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await guard(update):
        return await update.message.reply_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –æ–±–º–µ–∂–µ–Ω–æ.")
    text = (
        "üëã –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ *LC Waikiki Guide Bot*.\n\n"
        "‚Ä¢ **–§–∞–π–ª–∏** ‚Äî –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó: *–ú–æ–¥—É–ª—ñ*, *–î–æ–≤—ñ–¥–Ω–∏–∫–∏*, *Welcome*\n"
        "‚Ä¢ **–ü—Ä–æ–º–æ—É—à–µ–Ω** ‚Äî –ø—Ä–æ–≥—Ä–∞–º–∞ –¥–ª—è 3 –ø–æ–∑–∏—Ü—ñ–π (–∑ –º—ñ–Ω—ñ-–≥–∞–π–¥–∞–º–∏)\n\n"
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å PDF —è–∫ –¥–æ–∫—É–º–µ–Ω—Ç ‚Äî —è –¥–æ–¥–∞–º –π–æ–≥–æ –¥–æ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏."
    )
    await update.message.reply_text(text, parse_mode="Markdown", reply_markup=inline_home_kb())

# === üìö –§–∞–π–ª–∏: –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä—ñ–π ===
async def files_home(update: Update, context: ContextTypes.DEFAULT_TYPE, as_edit=False):
    if not await guard(update): return
    rows = [[InlineKeyboardButton(cat, callback_data=f"files_cat:{cat}")] for cat in FILE_CATEGORIES.keys()]
    rows.append([InlineKeyboardButton("üè† –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data="nav:home")])
    text = "üìö –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ñ–∞–π–ª—ñ–≤:"
    if as_edit and update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(rows))
    else:
        await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(rows), disable_web_page_preview=True)

# === üìö –§–∞–π–ª–∏: –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è ===
async def files_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await guard(update): return
    q = update.callback_query
    await q.answer()
    _, cat = q.data.split(":", 1)

    # —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª—ñ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ
    try:
        files = await list_files()
        available = {f["name"] for f in files}
    except Exception:
        available = set()

    titles = FILE_CATEGORIES.get(cat, [])
    buttons = []
    missing = []

    for title in titles:
        filename = FILES_DOCS.get(title)
        if not filename:
            missing.append(f"‚ö†Ô∏è –ù–µ–º–∞—î –º–∞–ø—ñ–Ω–≥—É: {title}")
            continue
        if filename in available:
            buttons.append([InlineKeyboardButton(title, url=file_url(filename))])
        else:
            missing.append(f"‚Äî {title} (—Ñ–∞–π–ª —â–µ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ)")

    footer = ""
    if missing:
        footer = "\n\n_–ü—Ä–∏–º—ñ—Ç–∫–∞:_\n" + "\n".join(missing)

    rows = buttons or [[InlineKeyboardButton("–ù–∞—Ä–∞–∑—ñ —Ñ–∞–π–ª—ñ–≤ —É —Ü—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–µ–º–∞—î", callback_data="noop")]]
    rows.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="nav:files"),
                 InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–∞", callback_data="nav:home")])

    await q.edit_message_text(
        text=f"üìÇ {cat}{footer}",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(rows),
        disable_web_page_preview=True
    )

# === ‚¨ÜÔ∏è –ü—Ä–æ–º–æ—É—à–µ–Ω: –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é ===
async def promo_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, edit_message=False):
    if not await guard(update): return
    rows = [
        [InlineKeyboardButton("üëî 2nd Store Manager", callback_data="promo:2nd Store Manager")],
        [InlineKeyboardButton("üß• Section Manager", callback_data="promo:Section Manager")],
        [InlineKeyboardButton("üì¶ Head of Stockroom", callback_data="promo:Head of Stockroom")],
        [InlineKeyboardButton("üè† –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data="nav:home")],
    ]
    text = "‚¨ÜÔ∏è –û–±–µ—Ä—ñ—Ç—å –Ω–∞–ø—Ä—è–º *Promotion Program*:"
    if edit_message and update.callback_query:
        await update.callback_query.edit_message_text(text, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(rows))
    else:
        await update.message.reply_text(text, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(rows))

# --- –ü—Ä–æ–º–æ-—Ä–æ–ª—ñ ---
async def on_promo_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await guard(update): return
    q = update.callback_query
    await q.answer()
    role = q.data.split(":", 1)[1]
    tabs = dict(PROMO_ROLES)[role]
    rows = [[InlineKeyboardButton(tab, callback_data=f"promo_nav:{role}:{tab}")] for tab in tabs]
    rows.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="nav:promo"),
                 InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–∞", callback_data="nav:home")])
    await q.edit_message_text(text=f"‚¨ÜÔ∏è {role}: –æ–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª", reply_markup=InlineKeyboardMarkup(rows))

# --- –ü—Ä–æ–º–æ-–≤–∫–ª–∞–¥–∫–∏ –∑ –º—ñ–Ω—ñ-–≥—ñ–¥–∞–º–∏ —Ç–∞ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ ---
async def on_promo_nav(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await guard(update): return
    q = update.callback_query
    await q.answer()
    _, role, tab = q.data.split(":", 2)

    # 1) –ú–Ü–ù–Ü-–ì–ê–ô–î
    guide = MINI_GUIDES.get((role, tab))
    header = f"üìÇ {role} ‚Äî {tab}"
    if guide:
        bullets = "\n".join([f"‚Ä¢ {x}" for x in guide])
        await q.edit_message_text(text=f"{header}\n\n{bullets}")
    else:
        await q.edit_message_text(text=header)

    # 2) –ö–ù–û–ü–ö–ò –ó –î–û–ö–£–ú–ï–ù–¢–ê–ú–ò (–ª–∏—à–µ –Ω–∞—è–≤–Ω—ñ)
    try:
        files = await list_files()
        available = {f["name"] for f in files}
    except Exception:
        available = set()

    items = PROMO_MAP.get(role, {}).get(tab, [])
    anchors = PAGE_ANCHORS.get(role, {}).get(tab, {})
    buttons = []
    for title in items:
        # –¥–∂–µ—Ä–µ–ª–æ –º–æ–∂–µ –±—É—Ç–∏ —è–∫ —ñ–∑ FILES_DOCS (–º–æ–¥—É–ª—ñ/–¥–æ–≤—ñ–¥–Ω–∏–∫–∏), —Ç–∞–∫ —ñ –∑ PROMO_DOCS (—Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞ —Ä–æ–ª—ñ)
        filename = FILES_DOCS.get(title) or PROMO_DOCS.get(title)
        if not filename or filename not in available:
            continue
        page = anchors.get(title)
        url = file_url(filename, page)
        buttons.append([InlineKeyboardButton(title, url=url)])

    if buttons:
        buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"promo:{role}"),
                        InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–∞", callback_data="nav:home")])
        await q.message.reply_text("–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏:", reply_markup=InlineKeyboardMarkup(buttons),
                                   disable_web_page_preview=True)
    else:
        await q.message.reply_text("–î–ª—è —Ü—å–æ–≥–æ —Ä–æ–∑–¥—ñ–ª—É –ø–æ–∫–∏ —â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ —É /files/.",
                                   reply_markup=InlineKeyboardMarkup([
                                       [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"promo:{role}")],
                                       [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–∞", callback_data="nav:home")],
                                   ]))

# --- Upload PDF ---
async def on_doc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await guard(update): return
    doc = update.message.document
    if not doc or not doc.file_name.lower().endswith(".pdf"):
        return await update.message.reply_text("–ü–æ—Ç—Ä—ñ–±–µ–Ω PDF-–¥–æ–∫—É–º–µ–Ω—Ç (–Ω–∞–¥—ñ—à–ª—ñ—Ç—å —è–∫ *–î–æ–∫—É–º–µ–Ω—Ç*, –Ω–µ —è–∫ —Ñ–æ—Ç–æ).")
    file = await doc.get_file()
    path = os.path.join("docs", doc.file_name)
    await file.download_to_drive(path)
    await update.message.reply_text("‚úÖ PDF –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —É üìö –§–∞–π–ª–∏ –∞–±–æ –≤ —Ä–æ–∑–¥—ñ–ª–∞—Ö –ü—Ä–æ–º–æ—É—à–µ–Ω.")

# --- Text buttons ---
async def on_text_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip()
    if text == "üìö –§–∞–π–ª–∏":
        return await files_home(update, context)
    if text == "‚¨ÜÔ∏è –ü—Ä–æ–º–æ—É—à–µ–Ω":
        return await promo_menu(update, context)

# --- Inline nav router ---
async def on_nav(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await guard(update): return
    q = update.callback_query
    await q.answer()
    _, where = q.data.split(":", 1)
    if where == "files":
        return await files_home(update, context, as_edit=True)
    if where == "promo":
        return await promo_menu(update, context, edit_message=True)
    if where == "home":
        caption = (
            "üëã –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ *LC Waikiki Guide Bot*.\n\n"
            "‚Ä¢ **–§–∞–π–ª–∏** ‚Äî –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó: *–ú–æ–¥—É–ª—ñ*, *–î–æ–≤—ñ–¥–Ω–∏–∫–∏*, *Welcome*\n"
            "‚Ä¢ **–ü—Ä–æ–º–æ—É—à–µ–Ω** ‚Äî –ø—Ä–æ–≥—Ä–∞–º–∞ –¥–ª—è 3 –ø–æ–∑–∏—Ü—ñ–π (–∑ –º—ñ–Ω—ñ-–≥–∞–π–¥–∞–º–∏)\n\n"
            "–ù–∞–¥—ñ—à–ª—ñ—Ç—å PDF —è–∫ –¥–æ–∫—É–º–µ–Ω—Ç ‚Äî —è –¥–æ–¥–∞–º –π–æ–≥–æ –¥–æ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏."
        )
        try:
            await q.edit_message_text(caption, parse_mode="Markdown", reply_markup=inline_home_kb())
        except Exception:
            await q.message.reply_text(caption, parse_mode="Markdown", reply_markup=inline_home_kb())

# ---------- BOOT ----------
def main():
    print("[bot] starting application...", flush=True)
    if not BOT_TOKEN:
        print("[bot] ERROR: TELEGRAM_BOT_TOKEN is empty", flush=True)
        raise SystemExit(1)

    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("files", lambda u, c: files_home(u, c)))
    app.add_handler(CommandHandler("promo", lambda u, c: promo_menu(u, c)))

    # Inline –∫–æ–ª–±–µ–∫–∏
    app.add_handler(CallbackQueryHandler(on_nav, pattern=r"^nav:"))
    app.add_handler(CallbackQueryHandler(files_category, pattern=r"^files_cat:"))
    app.add_handler(CallbackQueryHandler(on_promo_role, pattern=r"^promo:"))
    app.add_handler(CallbackQueryHandler(on_promo_nav, pattern=r"^promo_nav:"))

    # –¢–µ–∫—Å—Ç–æ–≤—ñ –∫–Ω–æ–ø–∫–∏ + –ø—Ä–∏–π–æ–º PDF
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text_buttons))
    app.add_handler(MessageHandler(filters.Document.PDF, on_doc))

    print("[bot] polling...", flush=True)
    app.run_polling(drop_pending_updates=True, close_loop=False)

if __name__ == "__main__":
    main()

    app.run_polling(drop_pending_updates=True, close_loop=False)

if __name__ == "__main__":
    main()
