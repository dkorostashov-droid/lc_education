import os, pickle
from pathlib import Path
from tqdm import tqdm
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_community.document_loaders import PyPDFLoader
from langchain_community.vectorstores import FAISS  # –º–æ–∂–Ω–∞ –∑–∞–ª–∏—à–∏—Ç–∏ FAISS –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
from langchain_community.embeddings import FakeEmbeddings  # —â–æ–± –Ω–µ –≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ä–µ–∞–ª—å–Ω—É –º–æ–¥–µ–ª—å

DATA_PATH = Path("docs")
INDEX_PATH = Path("store")

def load_docs():
    docs = []
    for pdf_path in DATA_PATH.glob("*.pdf"):
        loader = PyPDFLoader(str(pdf_path))
        docs.extend(loader.load())
    return docs

def ingest():
    print("üß© –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é PDF...")
    docs = load_docs()
    print(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç—ñ–≤: {len(docs)}")

    text_splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=100)
    texts = text_splitter.split_documents(docs)
    print(f"‚úÇÔ∏è –†–æ–∑–±–∏—Ç–æ –Ω–∞ {len(texts)} —á–∞—Å—Ç–∏–Ω")

    # FakeEmbeddings –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–µ—Ä—Ç–∞—î —Ö–µ—à —Ç–µ–∫—Å—Ç—É ‚Äî RAM ‚âà 100 MB
    embeddings = FakeEmbeddings(size=384)
    vectorstore = FAISS.from_documents(texts, embeddings)
    vectorstore.save_local(str(INDEX_PATH))
    print("üíæ –Ü–Ω–¥–µ–∫—Å —Å—Ç–≤–æ—Ä–µ–Ω–æ —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")

if __name__ == "__main__":
    ingest()
