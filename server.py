import os
from fastapi import FastAPI, UploadFile, File, Form
from fastapi.responses import JSONResponse
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from pydantic import BaseModel
from retriever import HybridRetriever
from llm import LLM

# üîß –≥–∞—Ä–∞–Ω—Ç—É—î–º–æ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π –ø–µ—Ä–µ–¥ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è–º StaticFiles
os.makedirs("docs", exist_ok=True)
os.makedirs("store", exist_ok=True)

app = FastAPI(title="PromoDocs API")

# –î–æ–∑–≤–æ–ª—è—î–º–æ CORS (—â–æ–± –±–æ—Ç —ñ –≤–µ–± –º–æ–≥–ª–∏ –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—è)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# üìÇ –ø—É–±–ª—ñ–∫—É—î–º–æ PDF —á–µ—Ä–µ–∑ /files/
app.mount("/files", StaticFiles(directory="docs"), name="files")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
retriever = HybridRetriever(store_dir="store")
llm = LLM(provider=os.getenv("LLM_PROVIDER", "openai"), api_key=os.getenv("LLM_API_KEY", ""))

# ---- MODELS ----
class AskRequest(BaseModel):
    question: str

# ---- ROUTES ----
@app.get("/health")
def health():
    return {"status": "ok"}

@app.post("/upload")
async def upload(file: UploadFile = File(...)):
    """–ü—Ä–∏–π–º–∞—î PDF, –∑–±–µ—Ä—ñ–≥–∞—î —ñ –¥–æ–¥–∞—î –¥–æ —ñ–Ω–¥–µ–∫—Å—É."""
    try:
        filename = file.filename
        path = os.path.join("docs", filename)
        with open(path, "wb") as f:
            f.write(await file.read())
        retriever.add_document(path)
        return {"message": f"{filename} uploaded and indexed"}
    except Exception as e:
        return JSONResponse(content={"error": str(e)}, status_code=500)

@app.post("/ask")
async def ask(request: AskRequest):
    """–ü–∏—Ç–∞–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤."""
    try:
        docs = retriever.search(request.question)
        answer = llm.answer(request.question, docs)
        return {"answer": answer, "sources": [d["source"] for d in docs]}
    except Exception as e:
        return JSONResponse(content={"error": str(e)}, status_code=500)

@app.post("/reindex")
async def reindex():
    """–ü–æ–≤–Ω–µ –ø–µ—Ä–µ—ñ–Ω–¥–µ–∫—Å—É–≤–∞–Ω–Ω—è."""
    retriever.reindex("docs")
    return {"message": "Reindex complete"}

@app.get("/")
def root():
    return {"message": "PromoDocs API is running"}

# ---- DEBUG RUN ----
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
