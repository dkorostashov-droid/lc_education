import os
from fastapi import FastAPI
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from retriever import HybridRetriever
from llm import LLM

# üîß –≥–∞—Ä–∞–Ω—Ç—É—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π (–±–µ–∑–ø–µ—á–Ω—ñ—à–µ –¥–ª—è –ø–µ—Ä—à–æ–≥–æ –∑–∞–ø—É—Å–∫—É)
os.makedirs("docs", exist_ok=True)
os.makedirs("store", exist_ok=True)

app = FastAPI(title="PromoDocs API")

# CORS (—â–æ–± Telegram-–±–æ—Ç —ñ –±—Ä–∞—É–∑–µ—Ä –º–æ–≥–ª–∏ —Ö–æ–¥–∏—Ç–∏ –¥–æ API)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"],
    allow_credentials=True,
)

# üìÇ –ø—É–±–ª—ñ—á–Ω–∞ —Ä–æ–∑–¥–∞—á–∞ PDF –∑–∞ /files
# –í–ê–ñ–õ–ò–í–û: check_dir=False –≤–∏–º–∏–∫–∞—î –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –∫–∞—Ç–∞–ª–æ–≥—É –ø—ñ–¥ —á–∞—Å —Å—Ç–∞—Ä—Ç—É
app.mount("/files", StaticFiles(directory="docs", check_dir=False), name="files")

# ‚Äî‚Äî‚Äî –ú–æ–¥–µ–ª—ñ ‚Äî‚Äî‚Äî
class ChatRequest(BaseModel):
    question: str
    top_k: int = 6

# ‚Äî‚Äî‚Äî –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è ‚Äî‚Äî‚Äî
retriever = None
llm = LLM()

def ensure_retriever():
    """–õ—ñ–Ω–∏–≤–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ä–µ—Ç—Ä–∏–≤–µ—Ä–∞, —â–æ–±–∏ –Ω–µ –ø–∞–¥–∞—Ç–∏ –±–µ–∑ —ñ–Ω–¥–µ–∫—Å—É –Ω–∞ —Å—Ç–∞—Ä—Ç—ñ."""
    global retriever
    if retriever is None:
        retriever = HybridRetriever()
    return retriever

# ‚Äî‚Äî‚Äî –†–æ—É—Ç–∏ ‚Äî‚Äî‚Äî
@app.get("/health")
def health():
    return {"status": "ok"}

@app.post("/search")
def search(q: ChatRequest):
    r = ensure_retriever().search(q.question, q.top_k)
    return {"results": r.to_dict(orient="records")}

@app.post("/chat")
async def chat(q: ChatRequest):
    r = ensure_retriever().search(q.question, q.top_k)
    context = "\n\n".join([f"[p.{int(row.page)} {row.doc_id}] {row.text}" for _, row in r.iterrows()])
    prompt = f"""
–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –ª–∏—à–µ –Ω–∞–≤–µ–¥–µ–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç.
–Ø–∫—â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–µ–º–∞—î —É –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ ‚Äî —Å–∫–∞–∂–∏ –ø—Ä–æ —Ü–µ.
–î–æ–¥–∞–π –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –¥–∂–µ—Ä–µ–ª–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ: doc_id p.page.

–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {q.question}
–ö–æ–Ω—Ç–µ–∫—Å—Ç:
{context}
""".strip()
    ans = await llm.answer(prompt)
    sources = [
        {"doc_id": str(row.doc_id), "page": int(row.page), "source_path": str(row.source_path)}
        for _, row in r.iterrows()
    ]
    return {"answer": ans, "sources": sources}
